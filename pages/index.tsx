import { GetServerSidePropsContext, InferGetServerSidePropsType } from 'next'
import { CircularProgress, Container, Typography, Box, Button, Stack, FormControl, TextField, List, ListItem, ListItemButton, ListItemText, Card, FormLabel, RadioGroup, FormControlLabel, Radio, Slider, SliderTrack, AppBar } from '@mui/material'
import Head from 'next/head'
import { Fragment, useEffect } from 'react'
import NavBar from '../common/components/Header/Navbar'
import { useAuth } from '../contexts/AuthContext'
import { useRouter } from 'next/router'
import { doc, updateDoc } from 'firebase/firestore'
import { firestore } from '../common/utils/firebase/clientApp'
import { firebaseAdmin } from '../common/utils/firebase/adminApp'
import { ItemType, LoadingUserType } from '../common/types/firebase_types'
import { verifyAuthSSR } from '../common/utils/firebase/middlewares'
import { itemTypeFromFirebase } from '../common/utils/firebase/firebase_helpers'
import { Grid } from '@mui/material'
import GalleryItem from '../common/components/Gallery/GalleryItem'
import { useFormik } from 'formik'

// Used to include thumbnail data for safely rendering user models on dashboard


enum Holidays {
  'Christmas' = 0,
  'Hanukkah' = 1,
  'Kwanzaa' = 2,
  'New Years' = 3,
  'Non-Denominational' = 4
}
enum Protagonists {
  'Santa' = 0,
  'Rudolph' = 1,
  'Jesus' = 2,
  'Judah Macabee' = 3,
  'Moses' = 4,
  'Stone Cold Steve Austin' = 5
}




const Home = () => {
  // const Home = (props: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const { loadingUser, setLoadingUser } = useAuth()
  const router = useRouter();



  const songForm = useFormik({
    initialValues: {
      'artist': '',
      'song': '',
    }, onSubmit: async values => {
      console.log(values)
      // const res = await register(values.email, values.password, values.fname, values.lname);
      //router.push('/');
    }
  });

  const optionsForm = useFormik({
    initialValues: {
      'niceScale': 0,
      'holiday': 0,
      'protagonist': 0
    }, onSubmit: async values => {
      console.log(values)
    }
  });

  useEffect(() => {
    console.log(loadingUser.isLoading);
    console.log(loadingUser.user);
    if (loadingUser.isLoading) {
      return;
    }
    else if ((!loadingUser.isLoading && !loadingUser.user)) {
      console.log("redirecting to login...");
      router.push('/login');
    }
      
      //I cannot figure out how to fix this typescript warning but it works
      //This gets called if loadingUser does not yet have the twitterId (right after login)
      // setLoadingUser((prevState) => ({
      //   ...prevState,
      //   user: { ...prevState.user, twitterId: data.user.access_token }
      // }))
      
  }, [loadingUser]);



  return (
    (loadingUser.isLoading) ? <Container><Box component="div" width='100%' margin={10} display="flex" alignItems={'center'} justifyContent='center'><CircularProgress /></Box> </Container> :
      <Fragment>
        <Head>
          <title>HoliFi‚ùÑÔ∏è</title>
          <meta name="description" content="Generated by create next app" />
          {/* <Link rel="icon" href="/favicon.ico" /> */}
        </Head>
        <NavBar bg='black' p={4} />
        <Container maxWidth='md'>

          <Box component="div" textAlign='center'>
            {/* <NavBar /> */}
            <Stack direction={{ xs: 'column', sm: 'row' }} justifyContent='center' >
              <FormControl id='email'>
                <TextField
                  margin="normal"
                  required
                  fullWidth
                  name="Artist"
                  label='Artist'
                  autoFocus
                  onChange={e => songForm.setFieldValue('artist', e.target.value)}
                />
              </FormControl>
              <FormControl id='email'>
                <TextField
                  margin="normal"
                  required
                  fullWidth
                  name="Song"
                  label='Song'
                  autoFocus
                  onChange={e => songForm.setFieldValue('song', e.target.value)}
                />
              </FormControl>
              <Button sx={{'marginTop':'16px', 'marginBottom':'8px'}} onClick={songForm.submitForm}>Search</Button>

            </Stack>
            {/* <Box component="div" textAlign='left' width={'500px'} margin={'0 auto'}>
            Search Results...
          </Box> */}
            {/* <Grid container xs={9} justifyContent='center' margin='0 auto'>
              <Grid item xs={3}>
                <Card sx={{ padding: 1, backgroundColor: 'fff', height: '100%', alignItems: 'center', display: 'flex', justifyContent: 'center' }} variant='outlined'>
                  Queen
                </Card>
              </Grid>
              <Grid item xs={4}>
                <Card sx={{ padding: 1, backgroundColor: 'fff', height: '100%', alignItems: 'center', display: 'flex', justifyContent: 'center' }} variant='outlined'>
                  Bohemian Rhapsody
                </Card>
              </Grid>
              <Grid item xs={2}>
                <Card sx={{ padding: 1, backgroundColor: 'fff', height: '100%', alignItems: 'center', display: 'flex', justifyContent: 'center' }} variant='outlined'>
                  <Button variant='contained'>Use</Button>
                </Card>
              </Grid>
            </Grid> */}
            <Box margin='0 auto' marginTop={5} alignItems={'center'}>
              <Typography>Selected: Queen - Bohemian Rhapsody</Typography>
              <Stack direction={'column'}>
                <Box margin={5}>
                  <FormControl>
                    <RadioGroup
                      aria-labelledby="demo-radio-buttons-group-label"
                      defaultValue="female"
                      name="radio-buttons-group"
                      row
                      onChange={e => optionsForm.setFieldValue('holiday', e.target.value)}
                    >
                      <FormLabel id="demo-radio-buttons-group-label" sx={{ alignItems: 'center', display: 'flex' }}>Holiday</FormLabel>
                      <FormControlLabel value={0} control={<Radio />} label="Christmas" labelPlacement='top' />
                      <FormControlLabel value={1} control={<Radio />} label="Hanukkah" labelPlacement='top' />
                      <FormControlLabel value={2} control={<Radio />} label="Kwanzaa" labelPlacement='top' />
                      <FormControlLabel value={3} control={<Radio />} label="New Years" labelPlacement='top' />
                      <FormControlLabel value={4} control={<Radio />} label="Non-Denominational" labelPlacement='top' />

                    </RadioGroup>
                  </FormControl>
                </Box>
                <Box>
                  <FormControl>
                    <RadioGroup
                      aria-labelledby="demo-radio-buttons-group-label"
                      defaultValue="female"
                      name="radio-buttons-group"
                      row
                      onChange={e => optionsForm.setFieldValue('protagonist', e.target.value)}
                    >
                      <FormLabel id="demo-radio-buttons-group-label" sx={{ alignItems: 'center', display: 'flex' }}>Protagonist</FormLabel>
                      <FormControlLabel value={0} control={<Radio />} label="Santa Clause" labelPlacement='top' />
                      <FormControlLabel value={1} control={<Radio />} label="Jesus Christ" labelPlacement='top' />
                      <FormControlLabel value={2} control={<Radio />} label="Judah Maccabee" labelPlacement='top' />
                      <FormControlLabel value={3} control={<Radio />} label="Moses" labelPlacement='top' />
                      <FormControlLabel value={4} control={<Radio />} label="Stone Cold Steve Austin" labelPlacement='top' />
                    </RadioGroup>
                  </FormControl>

                </Box>
                <Box width={500} margin='0 auto'>
                <Slider min={-2} max={2} step={1} marks={[
                  { value: -2, label: 'Naughty' },
                  { value: -1, label: '' },
                  { value: 0, label: 'Neutral' },
                  { value: 1, label: '' },
                  { value: 2, label: 'Nice' },
                ]}  />
                </Box>

              </Stack>


            </Box>
          </Box>
        </Container>
      </Fragment>

  )
}


// export async function getServerSideProps(ctx: GetServerSidePropsContext) {
//   const uid = await verifyAuthSSR(ctx);
//   if (uid == null) {

//     return {
//       props: {
//         data: null
//       }
//     }
//   }
//   console.log("Successfully Authenticated", uid)
//   // FETCH STUFF HERE!! üöÄ
//   console.log("Trying to fetch: " + 'data/quotes/');
//   console.log("UID: " + uid)
//   const db = firebaseAdmin.firestore();
//   const itemObjects: ItemType[] = [];
//   const draftCollection = await db.collection("users/" + uid + "/data").get()
//   for (const doc of draftCollection.docs) {
//     const dataTypeResponse: ItemType | null = itemTypeFromFirebase(doc.id, doc.data());
//     if (dataTypeResponse != null) {
//       itemObjects.push(dataTypeResponse);
//     }
//   }
//   return {
//     props: {
//       data: JSON.parse(JSON.stringify(itemObjects))
//     }
//   }
// }


export default Home
